import numpy as np
from collections import Counter
with open('./Input_files/3_pt1_test.txt') as file:
    input = file.readlines()

#Counter has multiple update options
position_track = Counter()
distance_track = {} #track (x,y,line) = line distance

def parse(command):
    if command[0] == 'U':
        dx = 0
        dy = int(command[1:])
        return dx,dy
    elif command[0] == 'D':
        dx = 0
        dy = -1*(int(command[1:]))
        return dx,dy
    if command[0] == 'R':
        dx = int(command[1:])
        dy = 0
        return dx,dy
    if command[0] == 'L':
        dx = -1 * (int(command[1:]))#+1 for theranges
        dy = 0
        return dx,dy

for line_ind,line in enumerate(input):
    commands = line.split(',')
    posx = 0
    posy = 0
    dist = 0
    for command in commands:
        dx,dy = parse(command)
        delta = 0
        if dx != 0:
            d1 = 1 if dx >= 0 else -1
            xrange = range(posx+d1,posx + dx+d1,d1)
            update_list = [(x,posy) for x in xrange]
            for x in xrange:
                delta += 1
                if not (line_ind, x, posy) in distance_track.keys():
                    distance_track[(line_ind,x,posy)] = dist + delta
        else:
            d1 = 1 if dy >= 0 else -1
            yrange = range(posy+d1, posy + dy,d1)
            update_list = [(posx, y) for y in yrange]
            for y in yrange:
                if not (line_ind,posx,y) in distance_track.keys():
                    delta += 1
                    distance_track[(line_ind,posx,y)] = dist + delta
        posx += dx
        posy += dy
        dist += abs(dx) + abs(dy)
        position_track.update(update_list)

min_dist = 9999999999
cross_road_pos = [k for k, v in position_track.items() if v > 1]
for cross in cross_road_pos:
    x,y = cross
    if abs(x) + abs(y) < min_dist:
        min_dist = abs(x) + abs(y)

print(f"Part1: {min_dist}")

#part 2 track per line the dist to get to a position